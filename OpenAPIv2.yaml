openapi: 3.0.3
info:
  title: University Library API
  description: REST API for an online university library system
  version: 1.0.0
servers:
  - url: https://api.university-library.com/v1
    description: Example Production server

# -------------------------------
# üîê Security (optional bonus)
# -------------------------------
security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ---------------------------
  # üì¶ Reusable Parameters
  # ---------------------------
  parameters:
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    size:
      name: size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    bookId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    studentId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    loanId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid

  # ---------------------------
  # üõ£Ô∏è  Reusable Responses
  # ---------------------------
  responses:
    BadRequest:
      description: Invalid request parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: "Invalid UUID supplied."
    NotFound:
      description: Requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: "Book not found."
    InternalError:
      description: Unexpected internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: "Unexpected error occurred."

  # ---------------------------
  # üóÉÔ∏è Schemas
  # ---------------------------
  schemas:
    Book:
      type: object
      required: [id, title, author, isbn, publisher, pageCount, stock]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
          format: isbn
        publisher:
          type: string
        pageCount:
          type: integer
          minimum: 1
        stock:
          type: integer
          minimum: 0
    Student:
      type: object
      required: [id, name, studentNumber, email, isActive]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        studentNumber:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean
    Loan:
      type: object
      required: [id, studentId, bookId, loanDate, status]
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
        bookId:
          type: string
        loanDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          enum: [ongoing, returned, late]
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

# -------------------------------
# üìë Paths
# -------------------------------
paths:
  /books:
    get:
      tags: [Books]
      summary: Get all books with pagination
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  title: "Clean Code"
                  author: "Robert C. Martin"
                  isbn: "9780132350884"
                  publisher: "Prentice Hall"
                  pageCount: 464
                  stock: 5
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      tags: [Books]
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            example:
              id: "123e4567-e89b-12d3-a456-426614174001"
              title: "The Pragmatic Programmer"
              author: "Andrew Hunt, David Thomas"
              isbn: "9780201616224"
              publisher: "Addison-Wesley"
              pageCount: 352
              stock: 3
      responses:
        '201':
          description: Book created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /books/{id}:
    get:
      tags: [Books]
      summary: Get a book by ID
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      tags: [Books]
      summary: Update a book by ID
      parameters:
        - $ref: '#/components/parameters/bookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags: [Books]
      summary: Delete a book by ID
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '200':
          description: Book deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /students:
    get:
      tags: [Students]
      summary: Get all students
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      tags: [Students]
      summary: Add a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
            example:
              id: "223e4567-e89b-12d3-a456-426614174002"
              name: "Ada Lovelace"
              studentNumber: "S123456"
              email: "ada@example.edu"
              isActive: true
      responses:
        '201':
          description: Student created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /students/{id}:
    get:
      tags: [Students]
      summary: Get a student by ID
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        '200':
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      tags: [Students]
      summary: Update a student by ID
      parameters:
        - $ref: '#/components/parameters/studentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags: [Students]
      summary: Delete a student by ID
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        '200':
          description: Student deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /loans:
    get:
      tags: [Loans]
      summary: Get all loans
      responses:
        '200':
          description: A list of loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags: [Loans]
      summary: Create a new loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '201':
          description: Loan created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /loans/{id}:
    get:
      tags: [Loans]
      summary: Get a loan by ID
      parameters:
        - $ref: '#/components/parameters/loanId'
      responses:
        '200':
          description: Loan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /loans/{id}/return:
    patch:
      tags: [Loans]
      summary: Return a loaned book
      parameters:
        - $ref: '#/components/parameters/loanId'
      responses:
        '200':
          description: Loan marked as returned
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
