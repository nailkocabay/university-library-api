openapi: 3.0.3
info:
  title: University Library API
  description: REST API for an online university library system
  version: 1.0.0
servers:
  - url: https://api.university-library.com/v1
    description: Production server

paths:
  /books:
    get:
      tags: [Books]
      summary: Get all books with pagination
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      tags: [Books]
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully

  /books/{id}:
    get:
      tags: [Books]
      summary: Get a book by ID
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

    put:
      tags: [Books]
      summary: Update a book by ID
      parameters:
        - $ref: '#/components/parameters/bookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully

    delete:
      tags: [Books]
      summary: Delete a book by ID
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '200':
          description: Book deleted successfully

  /students:
    get:
      tags: [Students]
      summary: Get all students
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'

    post:
      tags: [Students]
      summary: Add a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Student created successfully

  /students/{id}:
    get:
      tags: [Students]
      summary: Get a student by ID
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        '200':
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

    put:
      tags: [Students]
      summary: Update a student by ID
      parameters:
        - $ref: '#/components/parameters/studentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated successfully

    delete:
      tags: [Students]
      summary: Delete a student by ID
      parameters:
        - $ref: '#/components/parameters/studentId'
      responses:
        '200':
          description: Student deleted successfully

  /loans:
    get:
      tags: [Loans]
      summary: Get all loans
      responses:
        '200':
          description: A list of loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'

    post:
      tags: [Loans]
      summary: Create a new loan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '201':
          description: Loan created successfully

  /loans/{id}:
    get:
      tags: [Loans]
      summary: Get a loan by ID
      parameters:
        - $ref: '#/components/parameters/loanId'
      responses:
        '200':
          description: Loan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'

  /loans/{id}/return:
    patch:
      tags: [Loans]
      summary: Return a loaned book
      parameters:
        - $ref: '#/components/parameters/loanId'
      responses:
        '200':
          description: Loan marked as returned

components:
  parameters:
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
    size:
      name: size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    bookId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    studentId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    loanId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    Book:
      type: object
      required: [id, title, author, isbn, publisher, pageCount, stock]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
          format: isbn
        publisher:
          type: string
        pageCount:
          type: integer
        stock:
          type: integer

    Student:
      type: object
      required: [id, name, studentNumber, email, isActive]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        studentNumber:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean

    Loan:
      type: object
      required: [id, studentId, bookId, loanDate, status]
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
        bookId:
          type: string
        loanDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          enum: [ongoing, returned, late]